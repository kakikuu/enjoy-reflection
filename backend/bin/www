const { supabaseClient } = require("../config/supabase.ts");

/**
 * Module dependencies.
 */

var app = require("../app.ts");
var debug = require("debug")("backend:server");
var http = require("http");

const { Server, WebSocket } = require("ws");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// 以下、WebSocketサーバーの設定を追加
const wss = new Server({ server });
wss.on("connection", function connection(ws) {
  console.log("クライアントがWebSocketで接続しました");
  // ws.send("WebSocketサーバーに接続しました");
});

// Supabaseのリアルタイム変更を購読
supabaseClient
  .channel("questions")
  .on(
    "postgres_changes",
    {
      event: "*", // INSERT, UPDATE, DELETEのどれか
      schema: "public",
      table: "questions",
    },
    (payload) => {
      console.log("Change received!", payload);
      // WebSocketを通じて全クライアントに変更を通知
      wss.clients.forEach(function each(client) {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify(payload));
        }
      });
    }
  )
  .subscribe();

// Supabaseのリアルタイム変更を購読
supabaseClient
  .channel("answers")
  .on(
    "postgres_changes",
    {
      event: "*", // INSERT, UPDATE, DELETEのどれか
      schema: "public",
      table: "answers",
    },
    (payload) => {
      console.log("Change received!", payload);
      // WebSocketを通じて全クライアントに変更を通知
      wss.clients.forEach(function each(client) {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify(payload));
        }
      });
    }
  )
  .subscribe();

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("Server is running on port " + port);
}

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
